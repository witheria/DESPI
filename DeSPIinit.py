# -*- coding: utf-8 -*-

# Package Installer created by Toni Schmidbauer (Discord Witheria #4806)
# All problems, bugs or requests to schmidbauer.biz@gmail.com
#
# Please have mercy with my coding, I'm doing python for only like half a year now.
#
# Created with: PyQt5, PyCharm
#
# WARNING: Do not edit this file unless you know what you are doing.
# (c) Toni Schmidbauer 2020
import json
import os.path
import shutil
import subprocess
import sys
import winreg


from inspect import getsourcefile
from pathlib import Path

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QGraphicsOpacityEffect, QMessageBox

main_path = os.path.split(os.path.abspath(getsourcefile(lambda: 0)))
powerPathing = {"packagePath": main_path[0], "userPath": "", "jsonfile": "", "name": "", "jsonpath": ""}
used = False
jsonPathNames = ["file", "local_file", "path"]
obsStandardPath = "C:\\Program Files\\obs-studio\\bin\\64bit\\obs64.exe"
obsStandardParameters = ""

# check if there is a config file to get the data from
my_file = Path(main_path[0] + "/.config")
if my_file.is_file():
    try:
        r = open(my_file, "r")
        jsonobject = json.load(r)
        r.close()
        powerPathing = jsonobject
        used = True
    except json.decoder.JSONDecodeError:
        print("config file not readable")


def resource_path(relative_path):
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)


Icon = resource_path("icon.ico")
Background = resource_path("bg2.png")


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(360, 140)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())

        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(360, 140))
        MainWindow.setMaximumSize(QtCore.QSize(360, 140))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.lbl = QtWidgets.QLabel(self.centralwidget)
        self.lbl.setGeometry(QtCore.QRect(0, -20, 111, 23))
        self.px = QPixmap(Background)
        self.lbl.setPixmap(self.px)
        self.lbl.resize(self.px.width(), self.px.height())
        # creating a opacity effect
        self.opacity_effect = QGraphicsOpacityEffect()

        # setting opacity level
        self.opacity_effect.setOpacity(0.3)

        # adding opacity effect to the label
        self.lbl.setGraphicsEffect(self.opacity_effect)

        self.install = QtWidgets.QPushButton(self.centralwidget)
        self.install.setGeometry(QtCore.QRect(8, 80, 111, 23))
        self.install.setObjectName("pushButton")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(38, 10, 351, 16))

        font = QtGui.QFont()
        font.setPointSize(10)

        self.label.setFont(font)
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(130, 40, 101, 16))
        self.label_2.setObjectName("label_2")

        self.finish = QtWidgets.QLabel(self.centralwidget)
        self.finish.setGeometry(QtCore.QRect(40, 60, 47, 14))
        self.finish.setObjectName("finish")

        self.delete = QtWidgets.QPushButton(self.centralwidget)
        self.delete.setGeometry(QtCore.QRect(122, 80, 111, 23))
        self.delete.setObjectName("pushButton_2")

        self.close = QtWidgets.QPushButton(self.centralwidget)
        self.close.setGeometry(QtCore.QRect(237, 80, 111, 23))
        self.close.setObjectName("pushButton_3")

        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.close.clicked.connect(lambda: sys.exit(0))

        self.install.clicked.connect(lambda: self.installPaths())

        self.delete.clicked.connect(lambda: delPackage())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DACH eSports Package Installer"))
        self.install.setText(_translate("MainWindow", "Installiere das Paket"))
        self.label.setText(_translate("MainWindow", "Willkommen zum DACH eSports Package Installer"))
        self.label_2.setText(_translate("MainWindow", "Was willst du tun?"))
        self.delete.setText(_translate("MainWindow", "Lösche das Paket"))
        self.close.setText(_translate("MainWindow", "Schließen"))
        self.finish.setText(_translate("MainWindow", ""))

    def installPaths(self):
        _translate = QtCore.QCoreApplication.translate
        path = QFileDialog.getExistingDirectory(self.centralwidget, "Zielordner eingeben",
                                                powerPathing["packagePath"])
        powerPathing["userPath"] = path

        file = QFileDialog.getOpenFileName(self.centralwidget, "Wähle die JSON", powerPathing["packagePath"])

        powerPathing["jsonfile"] = file[0]
        powerPathing["jsonpath"] = os.path.split(powerPathing["jsonfile"])[0]
        print(powerPathing["jsonfile"], powerPathing["jsonpath"])

        subdirlist = powerPathing["jsonpath"].split("/")[-1]
        print("This is the directory list: ", subdirlist)

        try:
            getFilePathsfromJSON(self, subdirlist)
            getOBSPath(0)
        except FileNotFoundError:
            pass
        try:
            file = open(".config", "r+")
        except FileNotFoundError or PermissionError:
            print("there is not config file yet, creating one...")
            file = open(".config", "w")
        file.truncate(0)
        json.dump(powerPathing, file, sort_keys=True, indent=4)
        file.close()
        os.system("attrib +h " + str(Path(powerPathing["packagePath"] + "/.config")))


def getFilePathsfromJSON(self, subdirlist):
    try:
        subfile = open(powerPathing["jsonfile"], "r", encoding="utf-8")
        subjsonobject = json.load(subfile)
        subfile.close()
    except FileNotFoundError:
        print("File not Found!")
        return
    powerPathing["name"] = subjsonobject["name"]
    print("Name seems to be: ", subjsonobject["name"])

    copyPackage()

    for i in subjsonobject['sources']:
        for key in jsonPathNames:
            # print("Checking for key: ", key)
            if key in i["settings"]:
                save = i['settings'][key]
                print("Found key: ", save)
                if subdirlist in save:
                    newName = powerPathing["userPath"] + "/" + powerPathing["name"] + save.split(subdirlist)[1]
                    print("This is the new path: ", newName)
                    i['settings'][key] = newName
                else:
                    print("The path seems to not be part of the package!")
            if "playlist" in i["settings"] and i["id"] == "vlc_source":
                for setting in range(0, len(i["settings"]["playlist"])):
                    save = i["settings"]["playlist"][setting]
                    print("Found playlist: ", save["value"])
                    if subdirlist in save["value"]:
                        newName = powerPathing["userPath"] + "/" + powerPathing["name"] + save["value"].split(subdirlist)[1]
                        print("This is the new path for the playlist: ", newName)
                        i["settings"]["playlist"][setting]["value"] = newName
            else:
                print("The path seems to not be part of the package!")
    for i in subjsonobject["transitions"]:
        if subdirlist in i["settings"]["path"]:
            print("Found transition: ", i)
            newName = powerPathing["userPath"] + "/" + powerPathing["name"] + i["settings"]["path"].split(subdirlist)[1]
            i["settings"]["path"] = newName
            print("New transition path is: ", newName)
        else:
            print("The path seems to not be part of the package!")

    packageFile = str(
        powerPathing["userPath"] + "\\" + powerPathing["name"] + "\\" + os.path.split(powerPathing["jsonfile"])[1])
    print("This will be the new package file: " + packageFile)
    subfile = open(packageFile, "w")
    json.dump(subjsonobject, subfile, sort_keys=True, indent=4)
    subfile.close()


def copyPackage():
    print(powerPathing)
    try:
        shutil.copytree((powerPathing["jsonpath"]),
                        powerPathing["userPath"] + "\\" + powerPathing["name"])
        print("Successfully copied files to ", powerPathing["userPath"] + "\\" + powerPathing["name"])
    except FileNotFoundError:
        print("copyPackage: File not found!")
    except NotADirectoryError:
        print(powerPathing, "There was no directory found!")
    except FileExistsError:
        print("There is already a directory at that position!")


def delPackage():
    """
    Deletes the last package installed ( the one saved in the .config file )
    :return: None
    """
    if used:
        dialog = QMessageBox()
        dialog.setIcon(QMessageBox.Information)
        dialog.setText("Alles im zuletzt installierten Ordner wird gelöscht! \n OBS sollte nicht geöffnet sein, damit"
                       " diese Funktion vollständig funktioniert.")
        dialog.setWindowTitle("Warnung")
        dialog.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)

        yes = dialog.exec_()
        if yes == QMessageBox.Ok:
            try:
                shutil.rmtree(powerPathing["userPath"] + "\\" + powerPathing["name"])
                getOBSPath(1)
            except FileNotFoundError:
                print("Package not found!")
            except PermissionError:
                print("Path could not be deleted!")
    else:
        print("No package installed yet!")


def getOBSPath(arg):
    """
    Way too much work went into this
    This method first gets the obs path from the registry, copies the scene collection to its appdata folder,
    then opens it with launch parameters. Note that obs needs to be closed by the user beforehand
    The "arg" is used to delete the collection from the folder
    :return: None
    """
    # this is the path to the obs scenes directory:
    print(os.path.split(powerPathing["jsonfile"])[1])
    if arg == 0:
        dest = str(os.getenv('APPDATA') + "\\obs-studio\\basic\\scenes\\" + powerPathing["name"] + ".json")
        src = powerPathing["userPath"] + "\\" + powerPathing["name"] + "\\" + os.path.split(powerPathing["jsonfile"])[1]
        shutil.copyfile(src, dest)
        registry = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)
        obskey = winreg.OpenKey(registry, r"SOFTWARE\OBS Studio")
        obs_dir, type_ = winreg.QueryValueEx(obskey, None)
        if type_ == winreg.REG_EXPAND_SZ:
            obs_dir = os.path.expandvars(obs_dir)
        elif type_ != winreg.REG_SZ:
            return None
        print("This is the obs path: ", obs_dir)
        obsremainder = r"\bin\64bit\obs64.exe"
        obsfullpath = obs_dir + obsremainder
        subprocess.Popen([obsfullpath, "--collection", powerPathing["name"]], cwd=os.path.split(obsfullpath)[0])
    if arg == 1:
        try:
            dest = str(os.getenv('APPDATA') + "\\obs-studio\\basic\\scenes\\" + powerPathing["name"] + ".json")
            os.remove(dest)
            print("Removed package from OBS Scenes!")
        except FileNotFoundError:
            print("The package could not be found in the OBS folder!")


def getDirName():  # DEPRECATED
    # get the main package directory name
    # arr = []
    # for root, dirs, files in os.walk(os.path.split(powerPathing["jsonfile"])[0]):
    #     for dir in dirs:
    #         arr.append(dir)
    # return arr
    pass


stylesheet = """
    QMainWindow {
        background-image: url("bg2.png");
        background-repeat: no-repeat; 
        background-position: left;
    }
"""

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon(Icon))

    win = QMainWindow()
    win.setWindowTitle("DACH eSports Package Installer")
    ui = Ui_MainWindow()
    ui.setupUi(win)

    win.show()
    app.exec_()
    # sys.exit(app.exec_())
