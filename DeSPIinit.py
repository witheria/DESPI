# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# (c) Toni Schmidbauer 2020
import json
import os.path
import shutil
import sys
from inspect import getsourcefile
from pathlib import Path

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QGraphicsOpacityEffect

main_path = os.path.split(os.path.abspath(getsourcefile(lambda: 0)))
powerPathing = {"packagePath": main_path[0], "userPath": "", "jsonfile": "", "name": "", "jsonpath": ""}
used = False

# check if there is a config file to get the data from
my_file = Path(main_path[0] + "/.config")
if my_file.is_file():
    try:
        r = open(my_file, "r")
        jsonobject = json.load(r)
        r.close()
        powerPathing = jsonobject
        used = True
    except json.decoder.JSONDecodeError:
        print("config file not readable")


def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)


Icon = resource_path("icon.ico")
Background = resource_path("bg2.png")


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(360, 140)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())

        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(360, 140))
        MainWindow.setMaximumSize(QtCore.QSize(360, 140))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.lbl = QtWidgets.QLabel(self.centralwidget)
        self.lbl.setGeometry(QtCore.QRect(0, -20, 111, 23))
        self.px = QPixmap(Background)
        self.lbl.setPixmap(self.px)
        self.lbl.resize(self.px.width(), self.px.height())
        # creating a opacity effect
        self.opacity_effect = QGraphicsOpacityEffect()

        # setting opacity level
        self.opacity_effect.setOpacity(0.3)

        # adding opacity effect to the label
        self.lbl.setGraphicsEffect(self.opacity_effect)

        self.install = QtWidgets.QPushButton(self.centralwidget)
        self.install.setGeometry(QtCore.QRect(8, 80, 111, 23))
        self.install.setObjectName("pushButton")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(38, 10, 351, 16))

        font = QtGui.QFont()
        font.setPointSize(10)

        self.label.setFont(font)
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(130, 40, 101, 16))
        self.label_2.setObjectName("label_2")

        self.finish = QtWidgets.QLabel(self.centralwidget)
        self.finish.setGeometry(QtCore.QRect(40, 60, 47, 14))
        self.finish.setObjectName("finish")

        self.delete = QtWidgets.QPushButton(self.centralwidget)
        self.delete.setGeometry(QtCore.QRect(122, 80, 111, 23))
        self.delete.setObjectName("pushButton_2")

        self.close = QtWidgets.QPushButton(self.centralwidget)
        self.close.setGeometry(QtCore.QRect(237, 80, 111, 23))
        self.close.setObjectName("pushButton_3")

        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.close.clicked.connect(lambda: sys.exit(0))

        self.install.clicked.connect(lambda: self.installPaths())

        self.delete.clicked.connect(lambda: delPackage())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DACH eSports Package Installer"))
        self.install.setText(_translate("MainWindow", "Installiere das Paket"))
        self.label.setText(_translate("MainWindow", "Willkommen zum DACH eSports Package Installer"))
        self.label_2.setText(_translate("MainWindow", "Was willst du tun?"))
        self.delete.setText(_translate("MainWindow", "Lösche das Paket"))
        self.close.setText(_translate("MainWindow", "Schließen"))
        self.finish.setText(_translate("MainWindow", ""))

    def installPaths(self):
        _translate = QtCore.QCoreApplication.translate
        path = QFileDialog.getExistingDirectory(self.centralwidget, "Enter the package folder",
                                                powerPathing["packagePath"])
        powerPathing["userPath"] = path

        file = QFileDialog.getOpenFileName(self.centralwidget, "Choose the JSON", powerPathing["packagePath"])
        powerPathing["jsonfile"] = file[0]
        powerPathing["jsonpath"] = os.path.split(powerPathing["jsonfile"])[0]
        print(powerPathing["jsonfile"], powerPathing["jsonpath"])

        subdirlist = powerPathing["jsonpath"].split("/")[-1]
        print(subdirlist)

        getFilePathsfromJSON(self, subdirlist)

        try:
            file = open(".config", "r+")
        except FileNotFoundError or PermissionError:
            print("there is not config file yet, creating one...")
            file = open(".config", "w")
        file.truncate(0)
        json.dump(powerPathing, file, sort_keys=True, indent=4)
        file.close()
        os.system("attrib +h " + str(Path(powerPathing["packagePath"] + "/.config")))


def getFilePathsfromJSON(self, subdirlist):
    try:
        subfile = open(powerPathing["jsonfile"], "r", encoding="utf-8")
        subjsonobject = json.load(subfile)
        subfile.close()
    except FileNotFoundError:
        print("File not Found!")
        return
    powerPathing["name"] = subjsonobject["name"]
    # print(jsonobject["name"])

    copyPackage()

    for i in subjsonobject['sources']:
        if "file" in i["settings"]:
            save = i['settings']['file']
            if subdirlist in save:
                newName = powerPathing["userPath"] + "/" + powerPathing["name"] + save.split(subdirlist)[1]
                print(newName)
                i['settings']['file'] = newName
    print(powerPathing["userPath"] + "\\" + powerPathing["name"] + "\\" + os.path.split(powerPathing["jsonfile"])[1])
    subfile = open(
        powerPathing["userPath"] + "\\" + powerPathing["name"] + "\\" + os.path.split(powerPathing["jsonfile"])[1], "w"
    )
    json.dump(subjsonobject, subfile, sort_keys=True, indent=4)
    subfile.close()


def copyPackage():
    print(powerPathing)
    try:
        shutil.copytree((powerPathing["jsonpath"]),
                        powerPathing["userPath"] + "\\" + powerPathing["name"])
    except FileNotFoundError:
        print("copyPackage: File not found!")
    except NotADirectoryError:
        print(powerPathing)
    except FileExistsError:
        print("There is already a directory at that position!")


def delPackage():
    if used:
        try:
            shutil.rmtree(powerPathing["userPath"])
        except FileNotFoundError:
            print("Package not found!")
    else:
        print("No package installed yet!")


def getDirName():  # DEPRECATED
    # get the main package directory name
    # arr = []
    # for root, dirs, files in os.walk(os.path.split(powerPathing["jsonfile"])[0]):
    #     for dir in dirs:
    #         arr.append(dir)
    # return arr
    pass


stylesheet = """
    QMainWindow {
        background-image: url("bg2.png");
        background-repeat: no-repeat; 
        background-position: left;
    }
"""

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon(Icon))

    win = QMainWindow()
    win.setWindowTitle("DACH eSports Package Installer")
    ui = Ui_MainWindow()
    ui.setupUi(win)



    win.show()
    app.exec_()
    # sys.exit(app.exec_())
